#!/usr/bin/env ruby
require "thor"
require "yaml"
require "mcblocky"

module McBlocky
  class Cli < Thor
    include Logging

    class_option :config,
      desc: 'Path to config file',
      default: 'config.yml',
      type: :string,
      aliases: '-f'

    desc "start", "Start the server"
    def start
      begin
        Config.load(options[:config])
      rescue ArgumentError => e
        log_error "Error in #{File.basename Config.config_path}:"
        log_error e.message
        exit 1
      end
      $server = Server.from_config
      log_status "Starting server..."
      $server.start
      log_status "Server is ready! Connect to 127.0.0.1:25565"
      reader = Thread.new do
        until $stdin.closed?
          line = $stdin.gets.chomp
          $server.command line unless line.empty?
        end
      end
      $server.say("McBlocky is ready")
      $server.on_message '!stop' do
        log_status "Stopping server..."
        $server.stop
      end
      $server.on_message /^!/ do |message, user|
        next unless $context
        command, _, args = message.partition(/\s+/)
        $context.helpers.each do |aliases, block|
          aliases = [aliases] if String === aliases
          aliases.each do |a|
            if command == "!#{a}"
              block.call(args, user, a)
              break
            end
          end
        end
      end
      listener = Listener.from_config do |context|
        old_context = $context
        $context = context
        old_initials = old_context ? old_context.chains.select{|x|x.kind == :initial} : []
        initials = context.chains.select{|x|x.kind == :initial}
        initials.each_with_index do |chain, i|
          old_chain = old_initials[i]
          if old_chain
            matches = true
            chain.commands.each_with_index do |cmd, j|
              if matches
                old_cmd = old_chain.commands[j]
                next if old_cmd == cmd
                matches = false
                $server.command cmd
              else
                $server.command cmd
              end
            end
          else
            chain.commands.each {|cmd| $server.command cmd}
          end
        end
        if old_context
          old_context.areas.each do |x1, y1, z1, x2, y2, z2|
            $server.command ['fill', x1, y1, z1, x2, y2, z2, 'minecraft:air'].join(' ')
          end
        end
        context.areas.each do |x1, y1, z1, x2, y2, z2|
          $server.command ['fill', x1, y1, z1, x2, y1, z2, 'minecraft:stained_glass', '7'].join(' ')
          $server.command ['fill', x1, y2, z1, x2, y2, z2, 'minecraft:stained_glass', '7'].join(' ')
          $server.command ['fill', x1, y1, z1, x1, y2, z2, 'minecraft:stained_glass', '7'].join(' ')
          $server.command ['fill', x2, y1, z1, x2, y2, z2, 'minecraft:stained_glass', '7'].join(' ')
          $server.command ['fill', x1, y1, z1, x2, y2, z1, 'minecraft:stained_glass', '7'].join(' ')
          $server.command ['fill', x1, y1, z2, x2, y2, z2, 'minecraft:stained_glass', '7'].join(' ')
        end
      end
      listener.start
      $server.loop
    rescue SystemExit
      if $server
        log_status "Stopping server..."
        $server.stop
      end
      reader.kill if reader
    rescue Interrupt
      if $server
        log_status "Stopping server..."
        $server.stop
      end
      reader.kill if reader
    rescue Exception
      log_error "Caught error, stopping server..."
      begin
        $server.stop if $server
        reader.kill if reader
      rescue
      end
      log_error "Error trace:"
      raise
    end
  end
end

McBlocky::Cli.start(ARGV)
